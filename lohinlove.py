# lohinlove.py
# --- –í–µ–±-—á–∞—Å—Ç—å –¥–ª—è Render ---
import os
from flask import Flask
from threading import Thread
import time as _time

app = Flask('')

@app.route('/')
def home():
    return "Bot is alive and running!"

def run_web_server():
    port = int(os.environ.get('PORT', 8080))
    app.run(host='0.0.0.0', port=port)

def keep_alive():
    t = Thread(target=run_web_server)
    t.daemon = True
    t.start()

# --- –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥ –±–æ—Ç–∞ ---
import logging
import random
from datetime import time
from telegram.ext import Application, CommandHandler

BOT_TOKEN = os.environ.get('BOT_TOKEN')
CHAT_ID = os.environ.get('CHAT_ID')

# –°–æ–æ–±—â–µ–Ω–∏—è
MORNING_MESSAGES = [
    "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, –º–æ—è –ª—é–±–∏–º–∞—è ‚òÄÔ∏è –ü—É—Å—Ç—å —Å–µ–≥–æ–¥–Ω—è –≤—Å—ë –±—É–¥–µ—Ç –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ!",
    "–ü—Ä–æ—Å—ã–ø–∞–π—Å—è, –º–æ—è –∫—Ä–∞—Å–∞–≤–∏—Ü–∞ ‚ù§Ô∏è –î–µ–Ω—å –∂–¥—ë—Ç —Ç–µ–±—è!",
    "–°–æ–ª–Ω—ã—à–∫–æ –≤—Å—Ç–∞–ª–æ, –∏ –≤–º–µ—Å—Ç–µ —Å –Ω–∏–º –ø—Ä–æ—Å–Ω—É–ª–∞—Å—å —Å–∞–º–∞—è –º–∏–ª–∞—è –¥–µ–≤–æ—á–∫–∞ –Ω–∞ —Å–≤–µ—Ç–µ ‚òÄÔ∏è",
    "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, –ø—Ä–∏–Ω—Ü–µ—Å—Å–∞ üëë –ü—É—Å—Ç—å —Ç–≤–æ–π –¥–µ–Ω—å –±—É–¥–µ—Ç –ª—ë–≥–∫–∏–º –∏ –¥–æ–±—Ä—ã–º!",
    "–ü—É—Å—Ç—å —Å–µ–≥–æ–¥–Ω—è —Ç–µ–±–µ —É–ª—ã–±–Ω—ë—Ç—Å—è –≤–µ—Å—å –º–∏—Ä üå∏ –¢—ã —ç—Ç–æ–≥–æ –∑–∞—Å–ª—É–∂–∏–≤–∞–µ—à—å!",
    "–£—Ç—Ä–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –º—ã—Å–ª–∏ –æ —Ç–µ–±–µ ‚ù§Ô∏è",
    "–ñ–µ–ª–∞—é —Ç–µ–±–µ —Å–ª–∞–¥–∫–æ–≥–æ —É—Ç—Ä–∞, –∫–∞–∫ —Ç—ã üçØ",
    "–ü—É—Å—Ç—å —É—Ç—Ä–æ –ø—Ä–∏–Ω–µ—Å—ë—Ç —Ç–µ–±–µ —É—é—Ç, —Ç–µ–ø–ª–æ –∏ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ üåÖ",
    "–¢—ã ‚Äî –º–æ–π –ª—É—á—à–∏–π –ø–æ–≤–æ–¥ —É–ª—ã–±–∞—Ç—å—Å—è –ø–æ —É—Ç—Ä–∞–º üíï",
    "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, –∞–Ω–≥–µ–ª –º–æ–π üòá –ü—É—Å—Ç—å –¥–µ–Ω—å –±—É–¥–µ—Ç —á—É–¥–µ—Å–Ω—ã–º!"
]

DAY_MESSAGES = [
    "–ù–∞–¥–µ—é—Å—å, —É —Ç–µ–±—è –≤—Å—ë —Ö–æ—Ä–æ—à–æ üíñ –Ø –ø—Ä–æ—Å—Ç–æ —Ö–æ—Ç–µ–ª –Ω–∞–ø–æ–º–Ω–∏—Ç—å, –∫–∞–∫–∞—è —Ç—ã –∫–ª–∞—Å—Å–Ω–∞—è!",
    "–¢—ã –¥–µ–ª–∞–µ—à—å —ç—Ç–æ—Ç –º–∏—Ä –ª—É—á—à–µ –ø—Ä–æ—Å—Ç–æ —Ç–µ–º, —á—Ç–æ –≤ –Ω—ë–º –µ—Å—Ç—å üåç",
    "–ü—É—Å—Ç—å –≤—Å—ë, –∑–∞ —á—Ç–æ —Ç—ã —Å–µ–≥–æ–¥–Ω—è –≤–æ–∑—å–º—ë—à—å—Å—è, –ø–æ–ª—É—á–∏—Ç—Å—è –∏–¥–µ–∞–ª—å–Ω–æ ‚ú®",
    "–¢—ã –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–∞—è üí´ –î–∞–∂–µ –µ—Å–ª–∏ –¥–µ–Ω—å —Å–ª–æ–∂–Ω—ã–π ‚Äî —è –≤–µ—Ä—é –≤ —Ç–µ–±—è!",
    "–ï—Å–ª–∏ –≤–¥—Ä—É–≥ —É—Å—Ç–∞–ª–∞ ‚Äî –ø–æ–º–Ω–∏, —á—Ç–æ —Ç—ã –∑–∞—Å–ª—É–∂–∏–≤–∞–µ—à—å –æ—Ç–¥—ã—Ö–∞ –∏ –ª—é–±–≤–∏ üå∏",
    "–Ø –±—ã —Å–µ–π—á–∞—Å –≤—Å—ë –æ—Ç–¥–∞–ª, —á—Ç–æ–±—ã –ø—Ä–æ—Å—Ç–æ –æ–±–Ω—è—Ç—å —Ç–µ–±—è ü§ç",
    "–¢—ã –∑–∞—Å–ª—É–∂–∏–≤–∞–µ—à—å —Ç–æ–ª—å–∫–æ —Å–∞–º–æ–≥–æ –ª—É—á—à–µ–≥–æ üíê",
    "–ù–µ –∑–∞–±—ã–≤–∞–π —É–ª—ã–±–∞—Ç—å—Å—è üòå —Ç–≤–æ—è —É–ª—ã–±–∫–∞ –¥–µ–ª–∞–µ—Ç —á—É–¥–µ—Å–∞!",
    "–¢—ã –º–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è üíû",
    "–ù–∞–¥–µ—é—Å—å, —Ç–≤–æ–π –¥–µ–Ω—å –ø—Ä–æ—Ö–æ–¥–∏—Ç —á—É–¥–µ—Å–Ω–æ üå§Ô∏è"
]

EVENING_MESSAGES = [
    "–°–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏, –º–æ—è —Ä–æ–¥–Ω–∞—è üåô –ü—É—Å—Ç—å —Ç–µ–±–µ —Å–Ω—è—Ç—Å—è —Å–∞–º—ã–µ –¥–æ–±—Ä—ã–µ —Å–Ω—ã ‚ù§Ô∏è",
    "–î–µ–Ω—å –∑–∞–∫–æ–Ω—á–∏–ª—Å—è, —Ç–µ–ø–µ—Ä—å –æ—Ç–¥—ã—Ö–∞–π, –∫—Ä–∞—Å–∞–≤–∏—Ü–∞ üåå",
    "–Ø –≥–æ—Ä–∂—É—Å—å —Ç–æ–±–æ–π, —Ç—ã —Å–µ–≥–æ–¥–Ω—è —Å–ø—Ä–∞–≤–∏–ª–∞—Å—å —Å–æ –≤—Å–µ–º üí™",
    "–ü—É—Å—Ç—å –Ω–æ—á—å –æ–±–Ω–∏–º–µ—Ç —Ç–µ–±—è —Ç–µ–ø–ª–æ–º –∏ –ø–æ–∫–æ–µ–º üí§",
    "–¢—ã –∑–∞—Å–ª—É–∂–∏–ª–∞ –æ—Ç–¥—ã—Ö, –º–æ—è –∑–≤—ë–∑–¥–æ—á–∫–∞ ‚≠ê",
    "–°–ª–∞–¥–∫–∏—Ö —Å–Ω–æ–≤, –ª—é–±–∏–º–∞—è üíã –Ø —Ä—è–¥–æ–º ‚Äî –º—ã—Å–ª–µ–Ω–Ω–æ –∏ —Å–µ—Ä–¥—Ü–µ–º.",
    "–¢—ã —Å–∞–º–∞—è –ª—É—á—à–∞—è, –∏ –ø—É—Å—Ç—å –¥–∞–∂–µ —Å–Ω—ã —Ç–µ–±–µ —ç—Ç–æ –Ω–∞–ø–æ–º–Ω—è—Ç üåô",
    "–ü—É—Å—Ç—å —Ç–≤–æ–∏ —Å–Ω—ã –±—É–¥—É—Ç –¥–æ–±—Ä—ã–º–∏ –∏ —Å–≤–µ—Ç–ª—ã–º–∏, –∫–∞–∫ —Ç—ã üå∏",
    "–ù–æ—á—å ‚Äî –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å—Å—è. –°–ø–∏ —Å–ø–æ–∫–æ–π–Ω–æ ‚ù§Ô∏è",
    "–û–±–Ω–∏–º–∞—é —Ç–µ–±—è —Å–∫–≤–æ–∑—å —ç–∫—Ä–∞–Ω, —Å–ø–∏ —Å–ª–∞–¥–∫–æ üò¥"
]

logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)
logger = logging.getLogger(__name__)

async def send_message_job(context):
    job_context = context.job.data
    message_type = job_context["type"]
    master_list = job_context["list"]
    bot_data = context.bot_data
    chat_id = bot_data.get("chat_id") or CHAT_ID
    if not chat_id:
        logger.info("chat_id –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
        return
    message_list_key = f"{message_type}_messages"
    if not bot_data.get(message_list_key):
        bot_data[message_list_key] = master_list.copy()
        random.shuffle(bot_data[message_list_key])
    if not bot_data[message_list_key]:
        bot_data[message_list_key] = master_list.copy()
        random.shuffle(bot_data[message_list_key])
    message = bot_data[message_list_key].pop()
    await context.bot.send_message(chat_id=chat_id, text=message)
    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ '{message_type}' —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç {chat_id}")

async def start(update, context):
    chat_id = update.effective_chat.id
    user_name = update.effective_user.first_name or "–¥—Ä—É–≥"
    context.bot_data["chat_id"] = chat_id
    await update.message.reply_text(f"–ü—Ä–∏–≤–µ—Ç, {user_name}! ‚ù§Ô∏è\n–Ø –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ –ø—Ä–∏—è—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å ü•∞")

    current_jobs = context.job_queue.get_jobs_by_name(str(chat_id))
    if not current_jobs:
        # UTC+3 –≤—Ä–µ–º—è
        context.job_queue.run_daily(send_message_job, time=time(hour=7, minute=30),  # —É—Ç—Ä–æ 07:30
                                    data={"type": "morning", "list": MORNING_MESSAGES},
                                    name=str(chat_id))
        context.job_queue.run_daily(send_message_job, time=time(hour=14, minute=0),   # –¥–µ–Ω—å 14:00
                                    data={"type": "day", "list": DAY_MESSAGES},
                                    name=str(chat_id))
        context.job_queue.run_daily(send_message_job, time=time(hour=23, minute=30),  # –≤–µ—á–µ—Ä 23:30
                                    data={"type": "evening", "list": EVENING_MESSAGES},
                                    name=str(chat_id))
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω—ã –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è —á–∞—Ç–∞ {chat_id}")
    if "day_messages" not in context.bot_data:
        context.bot_data["day_messages"] = DAY_MESSAGES.copy()
        random.shuffle(context.bot_data["day_messages"])
    first_message = context.bot_data["day_messages"].pop()
    await context.bot.send_message(chat_id=chat_id, text=first_message)

async def test_send(update, context):
    chat_id = update.effective_chat.id
    context.bot_data["chat_id"] = chat_id
    for ttype, lst in [("morning", MORNING_MESSAGES), ("day", DAY_MESSAGES), ("evening", EVENING_MESSAGES)]:
        msg = random.choice(lst)
        await context.bot.send_message(chat_id=chat_id, text=f"[TEST {ttype}] " + msg)
    await update.message.reply_text("–¢–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!")

def main():
    if not BOT_TOKEN:
        print("–û—à–∏–±–∫–∞: BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Å—å, —á—Ç–æ –æ–Ω –¥–æ–±–∞–≤–ª–µ–Ω –≤ Render ‚Üí Environment.")
        return

    application = Application.builder().token(BOT_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("test", test_send))
    keep_alive()
    _time.sleep(1)
    print("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

if __name__ == "__main__":
    main()
